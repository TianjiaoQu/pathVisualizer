{"ast":null,"code":"export function greedy(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift(); // If we encounter a wall, we skip it.\n\n    if (closestNode.isWall) continue; // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid, finishNode);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid, finishNode) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    const distance = getDistance(node, neighbor);\n    const distanceToCompare = manhattanDistance(neighbor, finishNode) + distance;\n\n    if (distanceToCompare < neighbor.distance) {\n      neighbor.distance = distanceToCompare;\n      neighbor.previousNode = node;\n    }\n  }\n}\n\nfunction manhattanDistance(node1, node2) {\n  const d1 = Math.abs(node1.row - node2.row);\n  const d2 = Math.abs(node1.col - node2.col);\n  return d1 + d2;\n}\n\nfunction getDistance(node1, node2) {\n  const x1 = node1.row;\n  const x2 = node2.row;\n  const y1 = node1.col;\n  const y2 = node2.col;\n  if (x2 < x1 && y1 === y2) return 3;else if (x2 > x1 && y1 === y2) return 3;else if (y2 < y1 && x1 === x2) return 1;else if (y2 > y1 && x1 === x2) return 1;\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const col = node.col,\n        row = node.row;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["/Users/tianjiaoqu/Documents/USC/CS571/pathVisualizer/src/PathfindingVisualizer/algorithms/greedy.js"],"names":["greedy","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","length","sortNodesByDistance","closestNode","shift","isWall","Infinity","isVisited","push","updateUnvisitedNeighbors","sort","nodeA","nodeB","node","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","getDistance","distanceToCompare","manhattanDistance","previousNode","node1","node2","d1","Math","abs","row","d2","col","x1","x2","y1","y2","neighbors","filter","nodes","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"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","sourcesContent":["export function greedy(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid, finishNode);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid, finishNode) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    const distance = getDistance(node, neighbor);\n    const distanceToCompare =\n      manhattanDistance(neighbor, finishNode) + distance;\n    if (distanceToCompare < neighbor.distance) {\n      neighbor.distance = distanceToCompare;\n      neighbor.previousNode = node;\n    }\n  }\n}\nfunction manhattanDistance(node1, node2) {\n  const d1 = Math.abs(node1.row - node2.row);\n  const d2 = Math.abs(node1.col - node2.col);\n  return d1 + d2;\n}\nfunction getDistance(node1, node2) {\n  const x1 = node1.row;\n  const x2 = node2.row;\n  const y1 = node1.col;\n  const y2 = node2.col;\n  if (x2 < x1 && y1 === y2) return 3;\n  else if (x2 > x1 && y1 === y2) return 3;\n  else if (y2 < y1 && x1 === x2) return 1;\n  else if (y2 > y1 && x1 === x2) return 1;\n}\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n"]},"metadata":{},"sourceType":"module"}