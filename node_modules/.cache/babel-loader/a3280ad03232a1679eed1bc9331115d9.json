{"ast":null,"code":"import _objectSpread from \"/Users/tianjiaoqu/Documents/USC/CS571/pathVisualizer/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/tianjiaoqu/Documents/USC/CS571/pathVisualizer/src/PathfindingVisualizer/PathfindingVisualizer.jsx\";\nimport React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport { dijkstra, getNodesInShortestPathOrder } from \"./algorithms/dijkstra\";\nimport { BFS, shortestPathOrder } from \"./algorithms/BFS\";\nimport { DFS } from \"./algorithms/DFS\";\nimport { aStar } from \"./algorithms/aStar\";\nimport { greedy } from \"./algorithms/greedy\";\nimport \"./PathfindingVisualizer.css\";\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      start_row: 10,\n      start_col: 10,\n      finish_row: 10,\n      finish_col: 35,\n      setStart: false,\n      setFinish: false\n    };\n  }\n\n  createNode(col, row) {\n    return {\n      col,\n      row,\n      isStart: row === this.state.start_row && col === this.state.start_col,\n      isFinish: row === this.state.finish_row && col === this.state.finish_col,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n      f: Infinity,\n      h: Infinity\n    };\n  }\n\n  getInitialGrid() {\n    const grid = [];\n\n    for (let row = 0; row < 25; row++) {\n      const currentRow = [];\n\n      for (let col = 0; col < 42; col++) {\n        const node = this.createNode(col, row);\n        currentRow.push(node);\n      }\n\n      grid.push(currentRow);\n    }\n\n    return grid;\n  }\n\n  getNewGridWithWallToggled(grid, row, col) {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n\n    const newNode = _objectSpread({}, node, {\n      isWall: !node.isWall\n    });\n\n    newGrid[row][col] = newNode;\n    return newGrid;\n  }\n\n  componentDidMount() {\n    const grid = this.getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col, isFinish, isStart) {\n    if (isFinish) {\n      this.setState({\n        setFinish: true\n      });\n    } else if (isStart) {\n      this.setState({\n        setStart: true\n      });\n    } else {\n      const newGrid = this.getNewGridWithWallToggled(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid,\n        mouseIsPressed: true\n      });\n    }\n  }\n\n  handleMouseMove(row, col) {\n    if (this.state.setFinish) {\n      for (let r = 0; r < 25; r++) {\n        for (let c = 0; c < 42; c++) {\n          const n = this.state.grid[r][c];\n\n          if (n.isFinish) {\n            const newN = _objectSpread({}, n, {\n              isFinish: !n.isFinish\n            });\n\n            this.state.grid[r][c] = newN;\n          }\n        }\n      }\n\n      const node = this.state.grid[row][col];\n\n      const newNode = _objectSpread({}, node, {\n        isFinish: true\n      });\n\n      this.state.grid[row][col] = newNode;\n      this.setState({\n        finish_row: row,\n        finish_col: col\n      });\n    } else if (this.state.setStart) {\n      for (let r = 0; r < 25; r++) {\n        for (let c = 0; c < 42; c++) {\n          const n = this.state.grid[r][c];\n\n          if (n.isStart) {\n            const newN = _objectSpread({}, n, {\n              isStart: !n.isStart\n            });\n\n            this.state.grid[r][c] = newN;\n          }\n        }\n      }\n\n      const node = this.state.grid[row][col];\n\n      const newNode = _objectSpread({}, node, {\n        isStart: true\n      });\n\n      this.state.grid[row][col] = newNode;\n      this.setState({\n        start_row: row,\n        start_col: col\n      });\n    }\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = this.getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false,\n      setFinish: false,\n      setStart: false\n    });\n  }\n\n  clearBoard() {\n    const grid = this.state.grid;\n\n    for (let row = 0; row < 25; row++) {\n      for (let col = 0; col < 42; col++) {\n        const node = grid[row][col];\n\n        if (node.isStart || node.isFinish) {} else {\n          document.getElementById(`node-${row}-${col}`).className = \"node \";\n        }\n\n        node.isWall = false;\n        node.distance = Infinity;\n        node.isVisited = false;\n        node.previousNode = null;\n        node.f = Infinity;\n        node.h = Infinity;\n        grid[row][col] = node;\n      }\n    }\n\n    this.setState({\n      grid\n    });\n  }\n\n  clearPath() {\n    const grid = this.state.grid;\n\n    for (let row = 0; row < 25; row++) {\n      for (let col = 0; col < 42; col++) {\n        const node = grid[row][col];\n\n        if (node.isStart || node.isFinish || node.isWall) {} else {\n          document.getElementById(`node-${row}-${col}`).className = \"node \";\n          node.isWall = false;\n        }\n\n        node.distance = Infinity;\n        node.isVisited = false;\n        node.previousNode = null;\n        node.f = Infinity;\n        node.h = Infinity;\n        grid[row][col] = node;\n      }\n    }\n\n    this.setState({\n      grid\n    });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length - 1) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 6 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-visited\";\n      }, 5 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 2; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i - 1];\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-shortest-path\";\n      }, 25 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    this.clearPath();\n    const grid = this.state.grid;\n    const startNode = grid[this.state.start_row][this.state.start_col];\n    const finishNode = grid[this.state.finish_row][this.state.finish_col];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  visualizeAStar() {\n    this.clearPath();\n    const grid = this.state.grid;\n    const startNode = grid[this.state.start_row][this.state.start_col];\n    const finishNode = grid[this.state.finish_row][this.state.finish_col];\n    const visitedNodesInOrder = aStar(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  visualizeGreedy() {\n    this.clearPath();\n    const grid = this.state.grid;\n    const startNode = grid[this.state.start_row][this.state.start_col];\n    const finishNode = grid[this.state.finish_row][this.state.finish_col];\n    const visitedNodesInOrder = greedy(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  visualizeBFS() {\n    this.clearPath();\n    const grid = this.state.grid;\n    const startNode = grid[this.state.start_row][this.state.start_col];\n    const finishNode = grid[this.state.finish_row][this.state.finish_col];\n    const visitedNodes = BFS(grid, startNode, finishNode);\n    const nodeShortestPathOrder = shortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodes, nodeShortestPathOrder);\n  }\n\n  visualizeDFS() {\n    this.clearPath();\n    const grid = this.state.grid;\n    const startNode = grid[this.state.start_row][this.state.start_col];\n    const finishNode = grid[this.state.finish_row][this.state.finish_col];\n    const visitedNodes = DFS(grid, startNode, finishNode);\n    const nodeShortestPathOrder = shortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodes, nodeShortestPathOrder);\n  }\n\n  render() {\n    const _this$state = this.state,\n          grid = _this$state.grid,\n          mouseIsPressed = _this$state.mouseIsPressed;\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"bars\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.visualizeDijkstra(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, \"Dijkstra's Algorithm\"), React.createElement(\"button\", {\n      onClick: () => this.visualizeBFS(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, \"Breadth-first Search Algorithm\"), React.createElement(\"button\", {\n      onClick: () => this.visualizeDFS(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, \"Depth-first Search Algorithm\"), React.createElement(\"button\", {\n      onClick: () => this.visualizeAStar(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, \"A * Search Algorithm\"), React.createElement(\"button\", {\n      onClick: () => this.visualizeGreedy(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, \"Greedy Best-first Search Algorithm\"), React.createElement(\"button\", {\n      onClick: () => this.clearBoard(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, \"Clear Board\"), React.createElement(\"button\", {\n      onClick: () => this.clearPath(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, \"Clear Path\")), React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, grid.map((row, rowIdx) => {\n      return React.createElement(\"div\", {\n        key: rowIdx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, row.map((node, nodeIdx) => {\n        const row = node.row,\n              col = node.col,\n              isFinish = node.isFinish,\n              isStart = node.isStart,\n              isWall = node.isWall;\n        return React.createElement(Node, {\n          key: nodeIdx,\n          col: col,\n          row: row,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed,\n          onMouseMove: (row, col) => this.handleMouseMove(row, col),\n          onMouseDown: (row, col, isFinish, isStart) => this.handleMouseDown(row, col, isFinish, isStart),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseMove: (row, col) => this.handleMouseMove(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 280\n          },\n          __self: this\n        });\n      }));\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/tianjiaoqu/Documents/USC/CS571/pathVisualizer/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"names":["React","Component","Node","dijkstra","getNodesInShortestPathOrder","BFS","shortestPathOrder","DFS","aStar","greedy","PathfindingVisualizer","constructor","state","grid","mouseIsPressed","start_row","start_col","finish_row","finish_col","setStart","setFinish","createNode","col","row","isStart","isFinish","distance","Infinity","isVisited","isWall","previousNode","f","h","getInitialGrid","currentRow","node","push","getNewGridWithWallToggled","newGrid","slice","newNode","componentDidMount","setState","handleMouseDown","handleMouseMove","r","c","n","newN","handleMouseEnter","handleMouseUp","clearBoard","document","getElementById","className","clearPath","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","visualizeDijkstra","startNode","finishNode","visualizeAStar","visualizeGreedy","visualizeBFS","visitedNodes","nodeShortestPathOrder","visualizeDFS","render","map","rowIdx","nodeIdx"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport { dijkstra, getNodesInShortestPathOrder } from \"./algorithms/dijkstra\";\nimport { BFS, shortestPathOrder } from \"./algorithms/BFS\";\nimport { DFS } from \"./algorithms/DFS\";\nimport { aStar } from \"./algorithms/aStar\";\nimport { greedy } from \"./algorithms/greedy\";\nimport \"./PathfindingVisualizer.css\";\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      start_row: 10,\n      start_col: 10,\n      finish_row: 10,\n      finish_col: 35,\n      setStart: false,\n      setFinish: false\n    };\n  }\n  createNode(col, row) {\n    return {\n      col,\n      row,\n      isStart: row === this.state.start_row && col === this.state.start_col,\n      isFinish: row === this.state.finish_row && col === this.state.finish_col,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n      f: Infinity,\n      h: Infinity\n    };\n  }\n  getInitialGrid() {\n    const grid = [];\n    for (let row = 0; row < 25; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 42; col++) {\n        const node = this.createNode(col, row);\n        currentRow.push(node);\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  }\n\n  getNewGridWithWallToggled(grid, row, col) {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n      ...node,\n      isWall: !node.isWall\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  }\n\n  componentDidMount() {\n    const grid = this.getInitialGrid();\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col, isFinish, isStart) {\n    if (isFinish) {\n      this.setState({ setFinish: true });\n    } else if (isStart) {\n      this.setState({ setStart: true });\n    } else {\n      const newGrid = this.getNewGridWithWallToggled(this.state.grid, row, col);\n      this.setState({ grid: newGrid, mouseIsPressed: true });\n    }\n  }\n\n  handleMouseMove(row, col) {\n    if (this.state.setFinish) {\n      for (let r = 0; r < 25; r++) {\n        for (let c = 0; c < 42; c++) {\n          const n = this.state.grid[r][c];\n          if (n.isFinish) {\n            const newN = {\n              ...n,\n              isFinish: !n.isFinish\n            };\n            this.state.grid[r][c] = newN;\n          }\n        }\n      }\n      const node = this.state.grid[row][col];\n      const newNode = {\n        ...node,\n        isFinish: true\n      };\n      this.state.grid[row][col] = newNode;\n      this.setState({ finish_row: row, finish_col: col });\n    } else if (this.state.setStart) {\n      for (let r = 0; r < 25; r++) {\n        for (let c = 0; c < 42; c++) {\n          const n = this.state.grid[r][c];\n          if (n.isStart) {\n            const newN = {\n              ...n,\n              isStart: !n.isStart\n            };\n            this.state.grid[r][c] = newN;\n          }\n        }\n      }\n      const node = this.state.grid[row][col];\n      const newNode = {\n        ...node,\n        isStart: true\n      };\n      this.state.grid[row][col] = newNode;\n      this.setState({ start_row: row, start_col: col });\n    }\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = this.getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false, setFinish: false, setStart: false });\n  }\n  clearBoard() {\n    const { grid } = this.state;\n\n    for (let row = 0; row < 25; row++) {\n      for (let col = 0; col < 42; col++) {\n        const node = grid[row][col];\n        if (node.isStart || node.isFinish) {\n        } else {\n          document.getElementById(`node-${row}-${col}`).className = \"node \";\n        }\n        node.isWall = false;\n        node.distance = Infinity;\n        node.isVisited = false;\n        node.previousNode = null;\n        node.f = Infinity;\n        node.h = Infinity;\n        grid[row][col] = node;\n      }\n    }\n    this.setState({ grid });\n  }\n  clearPath() {\n    const { grid } = this.state;\n\n    for (let row = 0; row < 25; row++) {\n      for (let col = 0; col < 42; col++) {\n        const node = grid[row][col];\n        if (node.isStart || node.isFinish || node.isWall) {\n        } else {\n          document.getElementById(`node-${row}-${col}`).className = \"node \";\n          node.isWall = false;\n        }\n        node.distance = Infinity;\n        node.isVisited = false;\n        node.previousNode = null;\n        node.f = Infinity;\n        node.h = Infinity;\n        grid[row][col] = node;\n      }\n    }\n    this.setState({ grid });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length - 1) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 6 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, 5 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 2; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i - 1];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, 25 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    this.clearPath();\n    const { grid } = this.state;\n    const startNode = grid[this.state.start_row][this.state.start_col];\n    const finishNode = grid[this.state.finish_row][this.state.finish_col];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  visualizeAStar() {\n    this.clearPath();\n    const { grid } = this.state;\n    const startNode = grid[this.state.start_row][this.state.start_col];\n    const finishNode = grid[this.state.finish_row][this.state.finish_col];\n    const visitedNodesInOrder = aStar(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  visualizeGreedy() {\n    this.clearPath();\n    const { grid } = this.state;\n    const startNode = grid[this.state.start_row][this.state.start_col];\n    const finishNode = grid[this.state.finish_row][this.state.finish_col];\n    const visitedNodesInOrder = greedy(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  visualizeBFS() {\n    this.clearPath();\n    const { grid } = this.state;\n    const startNode = grid[this.state.start_row][this.state.start_col];\n    const finishNode = grid[this.state.finish_row][this.state.finish_col];\n    const visitedNodes = BFS(grid, startNode, finishNode);\n    const nodeShortestPathOrder = shortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodes, nodeShortestPathOrder);\n  }\n\n  visualizeDFS() {\n    this.clearPath();\n    const { grid } = this.state;\n    const startNode = grid[this.state.start_row][this.state.start_col];\n    const finishNode = grid[this.state.finish_row][this.state.finish_col];\n    const visitedNodes = DFS(grid, startNode, finishNode);\n    const nodeShortestPathOrder = shortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodes, nodeShortestPathOrder);\n  }\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n\n    return (\n      <>\n        <div className=\"bars\">\n          <button onClick={() => this.visualizeDijkstra()}>\n            Dijkstra's Algorithm\n          </button>\n          <button onClick={() => this.visualizeBFS()}>\n            Breadth-first Search Algorithm\n          </button>\n          <button onClick={() => this.visualizeDFS()}>\n            Depth-first Search Algorithm\n          </button>\n          <button onClick={() => this.visualizeAStar()}>\n            A * Search Algorithm\n          </button>\n          <button onClick={() => this.visualizeGreedy()}>\n            Greedy Best-first Search Algorithm\n          </button>\n          <button onClick={() => this.clearBoard()}>Clear Board</button>\n          <button onClick={() => this.clearPath()}>Clear Path</button>\n        </div>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const { row, col, isFinish, isStart, isWall } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      row={row}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseMove={(row, col) => this.handleMouseMove(row, col)}\n                      onMouseDown={(row, col, isFinish, isStart) =>\n                        this.handleMouseDown(row, col, isFinish, isStart)\n                      }\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseMove={(row, col) => this.handleMouseMove(row, col)}\n                      onMouseUp={() => this.handleMouseUp()}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}