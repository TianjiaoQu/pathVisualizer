{"ast":null,"code":"// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift(); // If we encounter a wall, we skip it.\n\n    if (closestNode.isWall) continue; // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    const distance = getDistance(node, neighbor);\n    const distanceToCompare = node.distance + distance;\n\n    if (distanceToCompare < neighbor.distance) {\n      neighbor.distance = distanceToCompare;\n      neighbor.previousNode = node;\n    }\n  }\n}\n\nfunction getDistance(node1, node2) {\n  const x1 = node1.row;\n  const x2 = node2.row;\n  const y1 = node1.col;\n  const y2 = node2.col;\n  if (x2 < x1 && y1 === y2) return 3;else if (x2 > x1 && y1 === y2) return 3;else if (y2 < y1 && x1 === x2) return 1;else if (y2 > y1 && x1 === x2) return 1;\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const col = node.col,\n        row = node.row;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["/Users/tianjiaoqu/Documents/USC/CS571/pathVisualizer/src/PathfindingVisualizer/algorithms/dijkstra.js"],"names":["dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","length","sortNodesByDistance","closestNode","shift","isWall","Infinity","isVisited","push","updateUnvisitedNeighbors","sort","nodeA","nodeB","node","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","getDistance","distanceToCompare","previousNode","node1","node2","x1","row","x2","y1","col","y2","neighbors","filter","nodes","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"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","sourcesContent":["// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    const distance = getDistance(node, neighbor);\n    const distanceToCompare = node.distance + distance;\n    if (distanceToCompare < neighbor.distance) {\n      neighbor.distance = distanceToCompare;\n      neighbor.previousNode = node;\n    }\n  }\n}\nfunction getDistance(node1, node2) {\n  const x1 = node1.row;\n  const x2 = node2.row;\n  const y1 = node1.col;\n  const y2 = node2.col;\n  if (x2 < x1 && y1 === y2) return 3;\n  else if (x2 > x1 && y1 === y2) return 3;\n  else if (y2 < y1 && x1 === x2) return 1;\n  else if (y2 > y1 && x1 === x2) return 1;\n}\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n"]},"metadata":{},"sourceType":"module"}