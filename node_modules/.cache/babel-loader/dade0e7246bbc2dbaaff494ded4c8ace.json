{"ast":null,"code":"export function aStar(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  startNode.f = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift(); // If we encounter a wall, we skip it.\n\n    if (closestNode.isWall) continue; // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid, finishNode);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.f - nodeB.f);\n}\n\nfunction updateUnvisitedNeighbors(node, grid, finishNode) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    const distance = getDistance(node, neighbor);\n\n    if (neighbor.h === Infinity) {\n      neighbor.h = manhattanDistance(neighbor, finishNode);\n    }\n\n    const distanceToCompare = node.distance + distance;\n\n    if (distanceToCompare < neighbor.distance) {\n      neighbor.distance = distanceToCompare;\n      neighbor.previousNode = node;\n      neighbor.f = neighbor.distance + neighbor.h;\n    }\n  }\n}\n\nfunction manhattanDistance(node1, node2) {\n  const d1 = Math.abs(node1.row - node2.row);\n  const d2 = Math.abs(node1.col - node2.col);\n  return d1 + d2;\n}\n\nfunction getDistance(node1, node2) {\n  const x1 = node1.row;\n  const x2 = node2.row;\n  const y1 = node1.col;\n  const y2 = node2.col;\n  if (x2 < x1 && y1 === y2) return 3;else if (x2 > x1 && y1 === y2) return 3;else if (y2 < y1 && x1 === x2) return 1;else if (y2 > y1 && x1 === x2) return 1;\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const col = node.col,\n        row = node.row;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n}","map":{"version":3,"sources":["/Users/tianjiaoqu/Documents/USC/CS571/pathVisualizer/src/PathfindingVisualizer/algorithms/aStar.js"],"names":["aStar","grid","startNode","finishNode","visitedNodesInOrder","distance","f","unvisitedNodes","getAllNodes","length","sortNodesByDistance","closestNode","shift","isWall","Infinity","isVisited","push","updateUnvisitedNeighbors","sort","nodeA","nodeB","node","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","getDistance","h","manhattanDistance","distanceToCompare","previousNode","node1","node2","d1","Math","abs","row","d2","col","x1","x2","y1","y2","neighbors","filter","nodes"],"mappings":"AAAA,OAAO,SAASA,KAAT,CAAeC,IAAf,EAAqBC,SAArB,EAAgCC,UAAhC,EAA4C;AACjD,QAAMC,mBAAmB,GAAG,EAA5B;AACAF,EAAAA,SAAS,CAACG,QAAV,GAAqB,CAArB;AACAH,EAAAA,SAAS,CAACI,CAAV,GAAc,CAAd;AACA,QAAMC,cAAc,GAAGC,WAAW,CAACP,IAAD,CAAlC;;AACA,SAAO,CAAC,CAACM,cAAc,CAACE,MAAxB,EAAgC;AAC9BC,IAAAA,mBAAmB,CAACH,cAAD,CAAnB;AACA,UAAMI,WAAW,GAAGJ,cAAc,CAACK,KAAf,EAApB,CAF8B,CAG9B;;AACA,QAAID,WAAW,CAACE,MAAhB,EAAwB,SAJM,CAM9B;AACA;;AACA,QAAIF,WAAW,CAACN,QAAZ,KAAyBS,QAA7B,EAAuC,OAAOV,mBAAP;AACvCO,IAAAA,WAAW,CAACI,SAAZ,GAAwB,IAAxB;AACAX,IAAAA,mBAAmB,CAACY,IAApB,CAAyBL,WAAzB;AACA,QAAIA,WAAW,KAAKR,UAApB,EAAgC,OAAOC,mBAAP;AAChCa,IAAAA,wBAAwB,CAACN,WAAD,EAAcV,IAAd,EAAoBE,UAApB,CAAxB;AACD;AACF;;AAED,SAASO,mBAAT,CAA6BH,cAA7B,EAA6C;AAC3CA,EAAAA,cAAc,CAACW,IAAf,CAAoB,CAACC,KAAD,EAAQC,KAAR,KAAkBD,KAAK,CAACb,CAAN,GAAUc,KAAK,CAACd,CAAtD;AACD;;AAED,SAASW,wBAAT,CAAkCI,IAAlC,EAAwCpB,IAAxC,EAA8CE,UAA9C,EAA0D;AACxD,QAAMmB,kBAAkB,GAAGC,qBAAqB,CAACF,IAAD,EAAOpB,IAAP,CAAhD;;AACA,OAAK,MAAMuB,QAAX,IAAuBF,kBAAvB,EAA2C;AACzC,UAAMjB,QAAQ,GAAGoB,WAAW,CAACJ,IAAD,EAAOG,QAAP,CAA5B;;AACA,QAAIA,QAAQ,CAACE,CAAT,KAAeZ,QAAnB,EAA6B;AAC3BU,MAAAA,QAAQ,CAACE,CAAT,GAAaC,iBAAiB,CAACH,QAAD,EAAWrB,UAAX,CAA9B;AACD;;AAED,UAAMyB,iBAAiB,GAAGP,IAAI,CAAChB,QAAL,GAAgBA,QAA1C;;AACA,QAAIuB,iBAAiB,GAAGJ,QAAQ,CAACnB,QAAjC,EAA2C;AACzCmB,MAAAA,QAAQ,CAACnB,QAAT,GAAoBuB,iBAApB;AACAJ,MAAAA,QAAQ,CAACK,YAAT,GAAwBR,IAAxB;AACAG,MAAAA,QAAQ,CAAClB,CAAT,GAAakB,QAAQ,CAACnB,QAAT,GAAoBmB,QAAQ,CAACE,CAA1C;AACD;AACF;AACF;;AACD,SAASC,iBAAT,CAA2BG,KAA3B,EAAkCC,KAAlC,EAAyC;AACvC,QAAMC,EAAE,GAAGC,IAAI,CAACC,GAAL,CAASJ,KAAK,CAACK,GAAN,GAAYJ,KAAK,CAACI,GAA3B,CAAX;AACA,QAAMC,EAAE,GAAGH,IAAI,CAACC,GAAL,CAASJ,KAAK,CAACO,GAAN,GAAYN,KAAK,CAACM,GAA3B,CAAX;AACA,SAAOL,EAAE,GAAGI,EAAZ;AACD;;AACD,SAASX,WAAT,CAAqBK,KAArB,EAA4BC,KAA5B,EAAmC;AACjC,QAAMO,EAAE,GAAGR,KAAK,CAACK,GAAjB;AACA,QAAMI,EAAE,GAAGR,KAAK,CAACI,GAAjB;AACA,QAAMK,EAAE,GAAGV,KAAK,CAACO,GAAjB;AACA,QAAMI,EAAE,GAAGV,KAAK,CAACM,GAAjB;AACA,MAAIE,EAAE,GAAGD,EAAL,IAAWE,EAAE,KAAKC,EAAtB,EAA0B,OAAO,CAAP,CAA1B,KACK,IAAIF,EAAE,GAAGD,EAAL,IAAWE,EAAE,KAAKC,EAAtB,EAA0B,OAAO,CAAP,CAA1B,KACA,IAAIA,EAAE,GAAGD,EAAL,IAAWF,EAAE,KAAKC,EAAtB,EAA0B,OAAO,CAAP,CAA1B,KACA,IAAIE,EAAE,GAAGD,EAAL,IAAWF,EAAE,KAAKC,EAAtB,EAA0B,OAAO,CAAP;AAChC;;AACD,SAAShB,qBAAT,CAA+BF,IAA/B,EAAqCpB,IAArC,EAA2C;AACzC,QAAMyC,SAAS,GAAG,EAAlB;AADyC,QAEjCL,GAFiC,GAEpBhB,IAFoB,CAEjCgB,GAFiC;AAAA,QAE5BF,GAF4B,GAEpBd,IAFoB,CAE5Bc,GAF4B;AAGzC,MAAIA,GAAG,GAAG,CAAV,EAAaO,SAAS,CAAC1B,IAAV,CAAef,IAAI,CAACkC,GAAG,GAAG,CAAP,CAAJ,CAAcE,GAAd,CAAf;AACb,MAAIF,GAAG,GAAGlC,IAAI,CAACQ,MAAL,GAAc,CAAxB,EAA2BiC,SAAS,CAAC1B,IAAV,CAAef,IAAI,CAACkC,GAAG,GAAG,CAAP,CAAJ,CAAcE,GAAd,CAAf;AAC3B,MAAIA,GAAG,GAAG,CAAV,EAAaK,SAAS,CAAC1B,IAAV,CAAef,IAAI,CAACkC,GAAD,CAAJ,CAAUE,GAAG,GAAG,CAAhB,CAAf;AACb,MAAIA,GAAG,GAAGpC,IAAI,CAAC,CAAD,CAAJ,CAAQQ,MAAR,GAAiB,CAA3B,EAA8BiC,SAAS,CAAC1B,IAAV,CAAef,IAAI,CAACkC,GAAD,CAAJ,CAAUE,GAAG,GAAG,CAAhB,CAAf;AAC9B,SAAOK,SAAS,CAACC,MAAV,CAAiBnB,QAAQ,IAAI,CAACA,QAAQ,CAACT,SAAvC,CAAP;AACD;;AAED,SAASP,WAAT,CAAqBP,IAArB,EAA2B;AACzB,QAAM2C,KAAK,GAAG,EAAd;;AACA,OAAK,MAAMT,GAAX,IAAkBlC,IAAlB,EAAwB;AACtB,SAAK,MAAMoB,IAAX,IAAmBc,GAAnB,EAAwB;AACtBS,MAAAA,KAAK,CAAC5B,IAAN,CAAWK,IAAX;AACD;AACF;;AACD,SAAOuB,KAAP;AACD","sourcesContent":["export function aStar(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  startNode.f = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid, finishNode);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.f - nodeB.f);\n}\n\nfunction updateUnvisitedNeighbors(node, grid, finishNode) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    const distance = getDistance(node, neighbor);\n    if (neighbor.h === Infinity) {\n      neighbor.h = manhattanDistance(neighbor, finishNode);\n    }\n\n    const distanceToCompare = node.distance + distance;\n    if (distanceToCompare < neighbor.distance) {\n      neighbor.distance = distanceToCompare;\n      neighbor.previousNode = node;\n      neighbor.f = neighbor.distance + neighbor.h;\n    }\n  }\n}\nfunction manhattanDistance(node1, node2) {\n  const d1 = Math.abs(node1.row - node2.row);\n  const d2 = Math.abs(node1.col - node2.col);\n  return d1 + d2;\n}\nfunction getDistance(node1, node2) {\n  const x1 = node1.row;\n  const x2 = node2.row;\n  const y1 = node1.col;\n  const y2 = node2.col;\n  if (x2 < x1 && y1 === y2) return 3;\n  else if (x2 > x1 && y1 === y2) return 3;\n  else if (y2 < y1 && x1 === x2) return 1;\n  else if (y2 > y1 && x1 === x2) return 1;\n}\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n"]},"metadata":{},"sourceType":"module"}