{"ast":null,"code":"import _defineProperty from\"/Users/tianjiaoqu/Documents/USC/CS571/pathVisualizer/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/tianjiaoqu/Documents/USC/CS571/pathVisualizer/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/Users/tianjiaoqu/Documents/USC/CS571/pathVisualizer/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/tianjiaoqu/Documents/USC/CS571/pathVisualizer/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/tianjiaoqu/Documents/USC/CS571/pathVisualizer/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/tianjiaoqu/Documents/USC/CS571/pathVisualizer/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/tianjiaoqu/Documents/USC/CS571/pathVisualizer/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import Node from\"./Node/Node\";import{dijkstra,getNodesInShortestPathOrder}from\"./algorithms/dijkstra\";import{BFS,shortestPathOrder}from\"./algorithms/BFS\";import{DFS}from\"./algorithms/DFS\";import{aStar}from\"./algorithms/aStar\";import{greedy}from\"./algorithms/greedy\";import\"./PathfindingVisualizer.css\";import introJs from'intro.js';import'intro.js/introjs.css';import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import{faInfoCircle}from'@fortawesome/free-solid-svg-icons';var PathfindingVisualizer=/*#__PURE__*/function(_Component){_inherits(PathfindingVisualizer,_Component);function PathfindingVisualizer(){var _this;_classCallCheck(this,PathfindingVisualizer);_this=_possibleConstructorReturn(this,_getPrototypeOf(PathfindingVisualizer).call(this));_this.state={grid:[],mouseIsPressed:false,start_row:10,start_col:10,finish_row:10,finish_col:35,setStart:false,setFinish:false};return _this;}_createClass(PathfindingVisualizer,[{key:\"startIntro\",value:function startIntro(){var intro=introJs();intro.setOptions({steps:[{intro:\"Thank you for playing with PathVisualizer\"},{intro:\"Use mouse to choose your Start <b>(yellow icon)</b> and End <b>(pink icon)</b> position.\"},{intro:\"Click at any other position to set up Walls\"},{element:document.getElementById(\"algorithm\"),intro:\"Play with different Graph Algorithms here\",position:'bottom'},{element:document.getElementById(\"path\"),intro:\"Clear out current path here\",position:'bottom'},{element:document.getElementById(\"board\"),intro:\"Clear out current wall here\",position:'bottom'}]});intro.start();}},{key:\"createNode\",value:function createNode(col,row){return{col:col,row:row,isStart:row===this.state.start_row&&col===this.state.start_col,isFinish:row===this.state.finish_row&&col===this.state.finish_col,distance:Infinity,isVisited:false,isWall:false,previousNode:null,f:Infinity,h:Infinity};}},{key:\"getInitialGrid\",value:function getInitialGrid(){var grid=[];for(var row=0;row<25;row++){var currentRow=[];for(var col=0;col<42;col++){var node=this.createNode(col,row);currentRow.push(node);}grid.push(currentRow);}return grid;}},{key:\"getNewGridWithWallToggled\",value:function getNewGridWithWallToggled(grid,row,col){var newGrid=grid.slice();var node=newGrid[row][col];var newNode=_objectSpread({},node,{isWall:!node.isWall});newGrid[row][col]=newNode;return newGrid;}},{key:\"componentDidMount\",value:function componentDidMount(){var grid=this.getInitialGrid();this.setState({grid:grid});}},{key:\"handleMouseDown\",value:function handleMouseDown(row,col,isFinish,isStart){if(isFinish){this.setState({setFinish:true});}else if(isStart){this.setState({setStart:true});}else{var newGrid=this.getNewGridWithWallToggled(this.state.grid,row,col);this.setState({grid:newGrid,mouseIsPressed:true});}}},{key:\"handleMouseMove\",value:function handleMouseMove(row,col){if(this.state.setFinish){for(var r=0;r<25;r++){for(var c=0;c<42;c++){var n=this.state.grid[r][c];if(n.isFinish){var newN=_objectSpread({},n,{isFinish:!n.isFinish});this.state.grid[r][c]=newN;}}}var node=this.state.grid[row][col];var newNode=_objectSpread({},node,{isFinish:true});this.state.grid[row][col]=newNode;this.setState({finish_row:row,finish_col:col});}else if(this.state.setStart){for(var _r=0;_r<25;_r++){for(var _c=0;_c<42;_c++){var _n=this.state.grid[_r][_c];if(_n.isStart){var _newN=_objectSpread({},_n,{isStart:!_n.isStart});this.state.grid[_r][_c]=_newN;}}}var _node=this.state.grid[row][col];var _newNode=_objectSpread({},_node,{isStart:true});this.state.grid[row][col]=_newNode;this.setState({start_row:row,start_col:col});}}},{key:\"handleMouseEnter\",value:function handleMouseEnter(row,col){if(!this.state.mouseIsPressed)return;var newGrid=this.getNewGridWithWallToggled(this.state.grid,row,col);this.setState({grid:newGrid});}},{key:\"handleMouseUp\",value:function handleMouseUp(){this.setState({mouseIsPressed:false,setFinish:false,setStart:false});}},{key:\"clearBoard\",value:function clearBoard(){var grid=this.state.grid;for(var row=0;row<25;row++){for(var col=0;col<42;col++){var node=grid[row][col];if(node.isStart||node.isFinish){}else{document.getElementById(\"node-\".concat(row,\"-\").concat(col)).className=\"node \";}node.isWall=false;node.distance=Infinity;node.isVisited=false;node.previousNode=null;node.f=Infinity;node.h=Infinity;grid[row][col]=node;}}this.setState({grid:grid});}},{key:\"clearPath\",value:function clearPath(){var grid=this.state.grid;for(var row=0;row<25;row++){for(var col=0;col<42;col++){var node=grid[row][col];if(node.isStart||node.isFinish||node.isWall){}else{document.getElementById(\"node-\".concat(row,\"-\").concat(col)).className=\"node \";node.isWall=false;}node.distance=Infinity;node.isVisited=false;node.previousNode=null;node.f=Infinity;node.h=Infinity;grid[row][col]=node;}}this.setState({grid:grid});}},{key:\"animateDijkstra\",value:function animateDijkstra(visitedNodesInOrder,nodesInShortestPathOrder){var _this2=this;var _loop=function _loop(i){if(i===visitedNodesInOrder.length-1){setTimeout(function(){_this2.animateShortestPath(nodesInShortestPathOrder);},6*i);return{v:void 0};}setTimeout(function(){var node=visitedNodesInOrder[i];document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className=\"node node-visited\";},5*i);};for(var i=1;i<=visitedNodesInOrder.length;i++){var _ret=_loop(i);if(typeof _ret===\"object\")return _ret.v;}}},{key:\"animateShortestPath\",value:function animateShortestPath(nodesInShortestPathOrder){var _loop2=function _loop2(i){setTimeout(function(){var node=nodesInShortestPathOrder[i-1];document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className=\"node node-shortest-path\";},25*i);};for(var i=2;i<nodesInShortestPathOrder.length;i++){_loop2(i);}}},{key:\"visualizeDijkstra\",value:function visualizeDijkstra(){this.clearPath();var grid=this.state.grid;var startNode=grid[this.state.start_row][this.state.start_col];var finishNode=grid[this.state.finish_row][this.state.finish_col];var visitedNodesInOrder=dijkstra(grid,startNode,finishNode);var nodesInShortestPathOrder=getNodesInShortestPathOrder(finishNode);this.animateDijkstra(visitedNodesInOrder,nodesInShortestPathOrder);}},{key:\"visualizeAStar\",value:function visualizeAStar(){this.clearPath();var grid=this.state.grid;var startNode=grid[this.state.start_row][this.state.start_col];var finishNode=grid[this.state.finish_row][this.state.finish_col];var visitedNodesInOrder=aStar(grid,startNode,finishNode);var nodesInShortestPathOrder=getNodesInShortestPathOrder(finishNode);this.animateDijkstra(visitedNodesInOrder,nodesInShortestPathOrder);}},{key:\"visualizeGreedy\",value:function visualizeGreedy(){this.clearPath();var grid=this.state.grid;var startNode=grid[this.state.start_row][this.state.start_col];var finishNode=grid[this.state.finish_row][this.state.finish_col];var visitedNodesInOrder=greedy(grid,startNode,finishNode);var nodesInShortestPathOrder=getNodesInShortestPathOrder(finishNode);this.animateDijkstra(visitedNodesInOrder,nodesInShortestPathOrder);}},{key:\"visualizeBFS\",value:function visualizeBFS(){this.clearPath();var grid=this.state.grid;var startNode=grid[this.state.start_row][this.state.start_col];var finishNode=grid[this.state.finish_row][this.state.finish_col];var visitedNodes=BFS(grid,startNode,finishNode);var nodeShortestPathOrder=shortestPathOrder(finishNode);this.animateDijkstra(visitedNodes,nodeShortestPathOrder);}},{key:\"visualizeDFS\",value:function visualizeDFS(){this.clearPath();var grid=this.state.grid;var startNode=grid[this.state.start_row][this.state.start_col];var finishNode=grid[this.state.finish_row][this.state.finish_col];var visitedNodes=DFS(grid,startNode,finishNode);var nodeShortestPathOrder=shortestPathOrder(finishNode);this.animateDijkstra(visitedNodes,nodeShortestPathOrder);}},{key:\"render\",value:function render(){var _this3=this;var _this$state=this.state,grid=_this$state.grid,mouseIsPressed=_this$state.mouseIsPressed;return React.createElement(React.Fragment,null,React.createElement(\"div\",{className:\"container\"},React.createElement(\"div\",{className:\"bars\",id:\"algorithm\"},React.createElement(\"button\",{onClick:function onClick(){return _this3.visualizeDijkstra();}},\"Dijkstra's Algorithm\"),React.createElement(\"button\",{onClick:function onClick(){return _this3.visualizeBFS();}},\"Breadth-first Search Algorithm\"),React.createElement(\"button\",{onClick:function onClick(){return _this3.visualizeDFS();}},\"Depth-first Search Algorithm\"),React.createElement(\"button\",{onClick:function onClick(){return _this3.visualizeAStar();}},\"A * Search Algorithm\"),React.createElement(\"button\",{onClick:function onClick(){return _this3.visualizeGreedy();}},\"Greedy Best-first Search Algorithm\"),React.createElement(\"button\",{id:\"board\",onClick:function onClick(){return _this3.clearBoard();}},\"Clear Board\"),React.createElement(\"button\",{id:\"path\",onClick:function onClick(){return _this3.clearPath();}},\"Clear Path\"),React.createElement(FontAwesomeIcon,{style:{paddingLeft:\"20px\"},icon:faInfoCircle,touchRadius:\"18\",onClick:function onClick(){return _this3.startIntro();},color:\"red\"}))),React.createElement(\"div\",{className:\"grid\"},grid.map(function(row,rowIdx){return React.createElement(\"div\",{key:rowIdx},row.map(function(node,nodeIdx){var _React$createElement;var row=node.row,col=node.col,isFinish=node.isFinish,isStart=node.isStart,isWall=node.isWall;return React.createElement(Node,(_React$createElement={key:nodeIdx,col:col,row:row,isFinish:isFinish,isStart:isStart,isWall:isWall,mouseIsPressed:mouseIsPressed,onMouseMove:function onMouseMove(row,col){return _this3.handleMouseMove(row,col);},onMouseDown:function onMouseDown(row,col,isFinish,isStart){return _this3.handleMouseDown(row,col,isFinish,isStart);},onMouseEnter:function onMouseEnter(row,col){return _this3.handleMouseEnter(row,col);}},_defineProperty(_React$createElement,\"onMouseMove\",function onMouseMove(row,col){return _this3.handleMouseMove(row,col);}),_defineProperty(_React$createElement,\"onMouseUp\",function onMouseUp(){return _this3.handleMouseUp();}),_React$createElement));}));})));}}]);return PathfindingVisualizer;}(Component);export{PathfindingVisualizer as default};","map":{"version":3,"sources":["/Users/tianjiaoqu/Documents/USC/CS571/pathVisualizer/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"names":["React","Component","Node","dijkstra","getNodesInShortestPathOrder","BFS","shortestPathOrder","DFS","aStar","greedy","introJs","FontAwesomeIcon","faInfoCircle","PathfindingVisualizer","state","grid","mouseIsPressed","start_row","start_col","finish_row","finish_col","setStart","setFinish","intro","setOptions","steps","element","document","getElementById","position","start","col","row","isStart","isFinish","distance","Infinity","isVisited","isWall","previousNode","f","h","currentRow","node","createNode","push","newGrid","slice","newNode","getInitialGrid","setState","getNewGridWithWallToggled","r","c","n","newN","className","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","clearPath","startNode","finishNode","animateDijkstra","visitedNodes","nodeShortestPathOrder","visualizeDijkstra","visualizeBFS","visualizeDFS","visualizeAStar","visualizeGreedy","clearBoard","paddingLeft","startIntro","map","rowIdx","nodeIdx","handleMouseMove","handleMouseDown","handleMouseEnter","handleMouseUp"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport { dijkstra, getNodesInShortestPathOrder } from \"./algorithms/dijkstra\";\nimport { BFS, shortestPathOrder } from \"./algorithms/BFS\";\nimport { DFS } from \"./algorithms/DFS\";\nimport { aStar } from \"./algorithms/aStar\";\nimport { greedy } from \"./algorithms/greedy\";\nimport \"./PathfindingVisualizer.css\";\nimport introJs from 'intro.js';\nimport 'intro.js/introjs.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons';\n\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      start_row: 10,\n      start_col: 10,\n      finish_row: 10,\n      finish_col: 35,\n      setStart: false,\n      setFinish: false\n    };\n  }\n startIntro(){\n    var intro = introJs();\n      intro.setOptions({\n        steps: [\n          { \n            intro: \"Thank you for playing with PathVisualizer\"\n          },\n          { \n            intro: \"Use mouse to choose your Start <b>(yellow icon)</b> and End <b>(pink icon)</b> position.\"\n          },\n          {\n\n            intro: \"Click at any other position to set up Walls\"\n          },\n          {\n            element: document.getElementById(\"algorithm\"),\n            intro: \"Play with different Graph Algorithms here\",\n            position: 'bottom'\n          },\n          {\n            element: document.getElementById(\"path\"),\n            intro: \"Clear out current path here\",\n            position: 'bottom'\n          },\n          {\n            element: document.getElementById(\"board\"),\n            intro: \"Clear out current wall here\",\n            position: 'bottom'\n          }\n        ]\n      });\n\n      intro.start();\n  }\n  createNode(col, row) {\n    return {\n      col,\n      row,\n      isStart: row === this.state.start_row && col === this.state.start_col,\n      isFinish: row === this.state.finish_row && col === this.state.finish_col,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n      f: Infinity,\n      h: Infinity\n    };\n  }\n  getInitialGrid() {\n    const grid = [];\n    for (let row = 0; row < 25; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 42; col++) {\n        const node = this.createNode(col, row);\n        currentRow.push(node);\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  }\n\n  getNewGridWithWallToggled(grid, row, col) {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n      ...node,\n      isWall: !node.isWall\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  }\n\n  componentDidMount() {\n    const grid = this.getInitialGrid();\n    this.setState({ grid });\n    \n  }\n\n  handleMouseDown(row, col, isFinish, isStart) {\n    if (isFinish) {\n      this.setState({ setFinish: true });\n    } else if (isStart) {\n      this.setState({ setStart: true });\n    } else {\n      const newGrid = this.getNewGridWithWallToggled(this.state.grid, row, col);\n      this.setState({ grid: newGrid, mouseIsPressed: true });\n    }\n  }\n\n  handleMouseMove(row, col) {\n    if (this.state.setFinish) {\n      for (let r = 0; r < 25; r++) {\n        for (let c = 0; c < 42; c++) {\n          const n = this.state.grid[r][c];\n          if (n.isFinish) {\n            const newN = {\n              ...n,\n              isFinish: !n.isFinish\n            };\n            this.state.grid[r][c] = newN;\n          }\n        }\n      }\n      const node = this.state.grid[row][col];\n      const newNode = {\n        ...node,\n        isFinish: true\n      };\n      this.state.grid[row][col] = newNode;\n      this.setState({ finish_row: row, finish_col: col });\n    } else if (this.state.setStart) {\n      for (let r = 0; r < 25; r++) {\n        for (let c = 0; c < 42; c++) {\n          const n = this.state.grid[r][c];\n          if (n.isStart) {\n            const newN = {\n              ...n,\n              isStart: !n.isStart\n            };\n            this.state.grid[r][c] = newN;\n          }\n        }\n      }\n      const node = this.state.grid[row][col];\n      const newNode = {\n        ...node,\n        isStart: true\n      };\n      this.state.grid[row][col] = newNode;\n      this.setState({ start_row: row, start_col: col });\n    }\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = this.getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false, setFinish: false, setStart: false });\n  }\n  clearBoard() {\n    const { grid } = this.state;\n\n    for (let row = 0; row < 25; row++) {\n      for (let col = 0; col < 42; col++) {\n        const node = grid[row][col];\n        if (node.isStart || node.isFinish) {\n        } else {\n          document.getElementById(`node-${row}-${col}`).className = \"node \";\n        }\n        node.isWall = false;\n        node.distance = Infinity;\n        node.isVisited = false;\n        node.previousNode = null;\n        node.f = Infinity;\n        node.h = Infinity;\n        grid[row][col] = node;\n      }\n    }\n    this.setState({ grid });\n  }\n  clearPath() {\n    const { grid } = this.state;\n\n    for (let row = 0; row < 25; row++) {\n      for (let col = 0; col < 42; col++) {\n        const node = grid[row][col];\n        if (node.isStart || node.isFinish || node.isWall) {\n        } else {\n          document.getElementById(`node-${row}-${col}`).className = \"node \";\n          node.isWall = false;\n        }\n        node.distance = Infinity;\n        node.isVisited = false;\n        node.previousNode = null;\n        node.f = Infinity;\n        node.h = Infinity;\n        grid[row][col] = node;\n      }\n    }\n    this.setState({ grid });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length - 1) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 6 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, 5 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 2; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i - 1];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, 25 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    this.clearPath();\n    const { grid } = this.state;\n    const startNode = grid[this.state.start_row][this.state.start_col];\n    const finishNode = grid[this.state.finish_row][this.state.finish_col];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  visualizeAStar() {\n    this.clearPath();\n    const { grid } = this.state;\n    const startNode = grid[this.state.start_row][this.state.start_col];\n    const finishNode = grid[this.state.finish_row][this.state.finish_col];\n    const visitedNodesInOrder = aStar(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  visualizeGreedy() {\n    this.clearPath();\n    const { grid } = this.state;\n    const startNode = grid[this.state.start_row][this.state.start_col];\n    const finishNode = grid[this.state.finish_row][this.state.finish_col];\n    const visitedNodesInOrder = greedy(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  visualizeBFS() {\n    this.clearPath();\n    const { grid } = this.state;\n    const startNode = grid[this.state.start_row][this.state.start_col];\n    const finishNode = grid[this.state.finish_row][this.state.finish_col];\n    const visitedNodes = BFS(grid, startNode, finishNode);\n    const nodeShortestPathOrder = shortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodes, nodeShortestPathOrder);\n  }\n\n  visualizeDFS() {\n    this.clearPath();\n    const { grid } = this.state;\n    const startNode = grid[this.state.start_row][this.state.start_col];\n    const finishNode = grid[this.state.finish_row][this.state.finish_col];\n    const visitedNodes = DFS(grid, startNode, finishNode);\n    const nodeShortestPathOrder = shortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodes, nodeShortestPathOrder);\n  }\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n\n    return (\n      <>\n        <div className=\"container\">\n        <div className=\"bars\" id=\"algorithm\">\n         <button onClick={() => this.visualizeDijkstra()}>\n            Dijkstra's Algorithm\n          </button>\n          <button onClick={() => this.visualizeBFS()}>\n            Breadth-first Search Algorithm\n          </button>\n          <button onClick={() => this.visualizeDFS()}>\n            Depth-first Search Algorithm\n          </button>\n          <button onClick={() => this.visualizeAStar()}>\n            A * Search Algorithm\n          </button>\n          <button onClick={() => this.visualizeGreedy()}>\n            Greedy Best-first Search Algorithm\n          </button>\n          \n          <button id=\"board\" onClick={() => this.clearBoard()}>Clear Board</button>\n          <button id=\"path\" onClick={() => this.clearPath()}>Clear Path</button>\n          <FontAwesomeIcon style={{paddingLeft: \"20px\"}} icon={faInfoCircle} touchRadius=\"18\" onClick={() => this.startIntro()} color=\"red\"/>\n        </div>\n        </div>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const { row, col, isFinish, isStart, isWall } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      row={row}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseMove={(row, col) => this.handleMouseMove(row, col)}\n                      onMouseDown={(row, col, isFinish, isStart) =>\n                        this.handleMouseDown(row, col, isFinish, isStart)\n                      }\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseMove={(row, col) => this.handleMouseMove(row, col)}\n                      onMouseUp={() => this.handleMouseUp()}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}